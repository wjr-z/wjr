# This is a basic workflow to help you get started with Actions

name: Linux

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: ${{ matrix.sys.compiler }} ${{ matrix.sys.version }}
    strategy:
      fail-fast: false
      matrix:
        sys:
        - {compiler: clang, version: '13'}
        - {compiler: clang, version: '17'}
        - {compiler: clang, version: '18'}
        - {compiler: clang, version: '19'}
        - {compiler: clang, version: '20'}
        - {compiler: gcc, version: '9'}
        - {compiler: gcc, version: '11'}
        - {compiler: gcc, version: '12'}
        - {compiler: gcc, version: '13'}
        - {compiler: gcc, version: '14'}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install GCC
        if: matrix.sys.compiler == 'gcc'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{matrix.sys.version}}
          platform: x64

      - name: Install LLVM and Clang
        if: matrix.sys.compiler == 'clang'
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{matrix.sys.version}}
          platform: x64

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Init submodule
        run: git submodule update --init --recursive

      - name: Install GMP
        run: sudo apt-get update && sudo apt-get install -y libgmp-dev

      - name: Configure using CMake
        run: |
          if [[ "${{matrix.sys.compiler}}" = "gcc" ]]; then export CC=gcc-${{matrix.sys.version}}; export CXX=g++-${{matrix.sys.version}}; else export CC=clang; export CXX=clang++; fi
          cmake -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX
        working-directory: ./tests/units

      - name: Build
        run: cmake --build build --config Release --parallel
        working-directory: ./tests/units

      - name: Run tests
        run: ./tests
        working-directory: ./tests/units/build