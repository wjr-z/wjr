/**
 * @file random.hpp
 * @brief Random number generation utilities
 * @author wjr
 *
 * Provides type traits for random number generators and helper functions
 * for filling ranges with random values.
 */

#ifndef WJR_MATH_RANDOM_HPP__
#define WJR_MATH_RANDOM_HPP__

#include <algorithm>

#include <wjr/type_traits.hpp>

namespace wjr {

/// @private
template <typename Engine, typename = void>
struct _uniform_random_bit_generator_impl : std::false_type {};

template <typename Engine>
struct _uniform_random_bit_generator_impl<Engine, std::enable_if_t<std::is_invocable_v<Engine &>>>
    : std::conjunction<is_nonbool_unsigned_integral<std::invoke_result_t<Engine &>>,
                       std::is_same<decltype(Engine::min()), std::invoke_result_t<Engine &>>,
                       std::is_same<decltype(Engine::max()), std::invoke_result_t<Engine &>>> {};

/**
 * @brief Check if type satisfies UniformRandomBitGenerator requirements
 *
 * Tests whether Engine meets the standard UniformRandomBitGenerator concept.
 *
 * @tparam Engine Random engine type to check
 */
template <typename Engine>
struct uniform_random_bit_generator : _uniform_random_bit_generator_impl<Engine> {};

template <typename Engine>
inline constexpr bool uniform_random_bit_generator_v = uniform_random_bit_generator<Engine>::value;

/**
 * @brief Check if engine is suitable for biginteger random generation
 *
 * Tests whether Engine produces full-range uint64_t values, which is required
 * for efficient arbitrary-precision integer generation.
 *
 * @tparam Engine Random engine type to check
 */
template <typename Engine>
struct biginteger_uniform_random_bit_generator
    : std::conjunction<_uniform_random_bit_generator_impl<Engine>,
                       std::is_same<std::invoke_result_t<Engine &>, uint64_t>,
                       std::bool_constant<Engine::min() == std::numeric_limits<uint64_t>::min()>,
                       std::bool_constant<Engine::max() == std::numeric_limits<uint64_t>::max()>> {
};

template <typename Engine>
inline constexpr bool biginteger_uniform_random_bit_generator_v =
    biginteger_uniform_random_bit_generator<Engine>::value;

/**
 * @brief Fill range with random values
 *
 * Fills the range [first, last) with values generated by the random engine.
 *
 * @tparam Iter Iterator type
 * @tparam Rand Random engine type
 * @param[out] first Beginning of range to fill
 * @param[in] last End of range
 * @param[in] rd Random engine
 */
template <typename Iter, typename Rand>
void random(Iter first, Iter last, Rand &&rd) {
    std::generate(first, last, std::ref(rd));
}

/**
 * @brief Fill n elements with random values
 *
 * Fills Count elements starting at First with values generated by the random engine.
 *
 * @tparam Iter Iterator type
 * @tparam Rand Random engine type
 * @param[out] First Beginning of range to fill
 * @param[in] Count Number of elements to fill
 * @param[in] rd Random engine
 */
template <typename Iter, typename Rand>
void random_n(Iter First, size_t Count, Rand &&rd) {
    std::generate_n(First, Count, std::ref(rd));
}

} // namespace wjr

#endif // WJR_MATH_RANDOM_HPP__